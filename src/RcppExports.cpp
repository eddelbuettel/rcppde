// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// DEoptim_impl
Rcpp::List DEoptim_impl(const arma::colvec& minbound, const arma::colvec& maxbound, SEXP fnS, const Rcpp::List& control, SEXP rhoS);
RcppExport SEXP _RcppDE_DEoptim_impl(SEXP minboundSEXP, SEXP maxboundSEXP, SEXP fnSSEXP, SEXP controlSEXP, SEXP rhoSSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type minbound(minboundSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type maxbound(maxboundSEXP);
    Rcpp::traits::input_parameter< SEXP >::type fnS(fnSSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type control(controlSEXP);
    Rcpp::traits::input_parameter< SEXP >::type rhoS(rhoSSEXP);
    rcpp_result_gen = Rcpp::wrap(DEoptim_impl(minbound, maxbound, fnS, control, rhoS));
    return rcpp_result_gen;
END_RCPP
}
// putFunPtrInXPtr
SEXP putFunPtrInXPtr(const std::string& fstr);
RcppExport SEXP _RcppDE_putFunPtrInXPtr(SEXP fstrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type fstr(fstrSEXP);
    rcpp_result_gen = Rcpp::wrap(putFunPtrInXPtr(fstr));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_RcppDE_DEoptim_impl", (DL_FUNC) &_RcppDE_DEoptim_impl, 5},
    {"_RcppDE_putFunPtrInXPtr", (DL_FUNC) &_RcppDE_putFunPtrInXPtr, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_RcppDE(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
